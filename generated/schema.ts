// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Project extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Project entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Project must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Project", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Project | null {
    return changetype<Project | null>(
      store.get_in_block("Project", id.toHexString()),
    );
  }

  static load(id: Bytes): Project | null {
    return changetype<Project | null>(store.get("Project", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get profileId(): Bytes {
    let value = this.get("profileId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set profileId(value: Bytes) {
    this.set("profileId", Value.fromBytes(value));
  }

  get status(): i32 {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get metadata(): string {
    let value = this.get("metadata");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set metadata(value: string) {
    this.set("metadata", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get anchor(): Bytes {
    let value = this.get("anchor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set anchor(value: Bytes) {
    this.set("anchor", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get members(): Bytes | null {
    let value = this.get("members");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set members(value: Bytes | null) {
    if (!value) {
      this.unset("members");
    } else {
      this.set("members", Value.fromBytes(<Bytes>value));
    }
  }
}

export class FeedItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FeedItem entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FeedItem must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("FeedItem", id.toString(), this);
    }
  }

  static loadInBlock(id: string): FeedItem | null {
    return changetype<FeedItem | null>(store.get_in_block("FeedItem", id));
  }

  static load(id: string): FeedItem | null {
    return changetype<FeedItem | null>(store.get("FeedItem", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get content(): string {
    let value = this.get("content");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set content(value: string) {
    this.set("content", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get tag(): string {
    let value = this.get("tag");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tag(value: string) {
    this.set("tag", Value.fromString(value));
  }

  get subjectMetadataPointer(): string {
    let value = this.get("subjectMetadataPointer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set subjectMetadataPointer(value: string) {
    this.set("subjectMetadataPointer", Value.fromString(value));
  }

  get subjectId(): string {
    let value = this.get("subjectId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set subjectId(value: string) {
    this.set("subjectId", Value.fromString(value));
  }

  get objectId(): string | null {
    let value = this.get("objectId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set objectId(value: string | null) {
    if (!value) {
      this.unset("objectId");
    } else {
      this.set("objectId", Value.fromString(<string>value));
    }
  }

  get subject(): string {
    let value = this.get("subject");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set subject(value: string) {
    this.set("subject", Value.fromString(value));
  }

  get object(): string | null {
    let value = this.get("object");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set object(value: string | null) {
    if (!value) {
      this.unset("object");
    } else {
      this.set("object", Value.fromString(<string>value));
    }
  }

  get embed(): string | null {
    let value = this.get("embed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set embed(value: string | null) {
    if (!value) {
      this.unset("embed");
    } else {
      this.set("embed", Value.fromString(<string>value));
    }
  }

  get details(): string | null {
    let value = this.get("details");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set details(value: string | null) {
    if (!value) {
      this.unset("details");
    } else {
      this.set("details", Value.fromString(<string>value));
    }
  }
}

export class FeedItemEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FeedItemEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FeedItemEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("FeedItemEntity", id.toString(), this);
    }
  }

  static loadInBlock(id: string): FeedItemEntity | null {
    return changetype<FeedItemEntity | null>(
      store.get_in_block("FeedItemEntity", id),
    );
  }

  static load(id: string): FeedItemEntity | null {
    return changetype<FeedItemEntity | null>(store.get("FeedItemEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class FeedItemEmbed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FeedItemEmbed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FeedItemEmbed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("FeedItemEmbed", id.toString(), this);
    }
  }

  static loadInBlock(id: string): FeedItemEmbed | null {
    return changetype<FeedItemEmbed | null>(
      store.get_in_block("FeedItemEmbed", id),
    );
  }

  static load(id: string): FeedItemEmbed | null {
    return changetype<FeedItemEmbed | null>(store.get("FeedItemEmbed", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get key(): string | null {
    let value = this.get("key");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set key(value: string | null) {
    if (!value) {
      this.unset("key");
    } else {
      this.set("key", Value.fromString(<string>value));
    }
  }

  get pointer(): string | null {
    let value = this.get("pointer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pointer(value: string | null) {
    if (!value) {
      this.unset("pointer");
    } else {
      this.set("pointer", Value.fromString(<string>value));
    }
  }

  get protocol(): BigInt | null {
    let value = this.get("protocol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set protocol(value: BigInt | null) {
    if (!value) {
      this.unset("protocol");
    } else {
      this.set("protocol", Value.fromBigInt(<BigInt>value));
    }
  }

  get content(): string | null {
    let value = this.get("content");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set content(value: string | null) {
    if (!value) {
      this.unset("content");
    } else {
      this.set("content", Value.fromString(<string>value));
    }
  }
}

export class GrantShip extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GrantShip entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type GrantShip must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("GrantShip", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): GrantShip | null {
    return changetype<GrantShip | null>(
      store.get_in_block("GrantShip", id.toHexString()),
    );
  }

  static load(id: Bytes): GrantShip | null {
    return changetype<GrantShip | null>(
      store.get("GrantShip", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get profileId(): Bytes {
    let value = this.get("profileId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set profileId(value: Bytes) {
    this.set("profileId", Value.fromBytes(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get profileMetadata(): string {
    let value = this.get("profileMetadata");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set profileMetadata(value: string) {
    this.set("profileMetadata", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get anchor(): Bytes {
    let value = this.get("anchor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set anchor(value: Bytes) {
    this.set("anchor", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get status(): i32 {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

  get alloProfileMembers(): Bytes | null {
    let value = this.get("alloProfileMembers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set alloProfileMembers(value: Bytes | null) {
    if (!value) {
      this.unset("alloProfileMembers");
    } else {
      this.set("alloProfileMembers", Value.fromBytes(<Bytes>value));
    }
  }

  get shipApplicationBytesData(): Bytes | null {
    let value = this.get("shipApplicationBytesData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set shipApplicationBytesData(value: Bytes | null) {
    if (!value) {
      this.unset("shipApplicationBytesData");
    } else {
      this.set("shipApplicationBytesData", Value.fromBytes(<Bytes>value));
    }
  }

  get applicationSubmittedTime(): BigInt | null {
    let value = this.get("applicationSubmittedTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set applicationSubmittedTime(value: BigInt | null) {
    if (!value) {
      this.unset("applicationSubmittedTime");
    } else {
      this.set("applicationSubmittedTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get isAwaitingApproval(): boolean {
    let value = this.get("isAwaitingApproval");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isAwaitingApproval(value: boolean) {
    this.set("isAwaitingApproval", Value.fromBoolean(value));
  }

  get hasSubmittedApplication(): boolean {
    let value = this.get("hasSubmittedApplication");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set hasSubmittedApplication(value: boolean) {
    this.set("hasSubmittedApplication", Value.fromBoolean(value));
  }

  get isApproved(): boolean {
    let value = this.get("isApproved");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isApproved(value: boolean) {
    this.set("isApproved", Value.fromBoolean(value));
  }

  get approvedTime(): BigInt | null {
    let value = this.get("approvedTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approvedTime(value: BigInt | null) {
    if (!value) {
      this.unset("approvedTime");
    } else {
      this.set("approvedTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get isRejected(): boolean {
    let value = this.get("isRejected");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isRejected(value: boolean) {
    this.set("isRejected", Value.fromBoolean(value));
  }

  get rejectedTime(): BigInt | null {
    let value = this.get("rejectedTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set rejectedTime(value: BigInt | null) {
    if (!value) {
      this.unset("rejectedTime");
    } else {
      this.set("rejectedTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get applicationReviewReason(): string | null {
    let value = this.get("applicationReviewReason");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set applicationReviewReason(value: string | null) {
    if (!value) {
      this.unset("applicationReviewReason");
    } else {
      this.set("applicationReviewReason", Value.fromString(<string>value));
    }
  }

  get poolId(): BigInt | null {
    let value = this.get("poolId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set poolId(value: BigInt | null) {
    if (!value) {
      this.unset("poolId");
    } else {
      this.set("poolId", Value.fromBigInt(<BigInt>value));
    }
  }

  get shipContractAddress(): Bytes | null {
    let value = this.get("shipContractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set shipContractAddress(value: Bytes | null) {
    if (!value) {
      this.unset("shipContractAddress");
    } else {
      this.set("shipContractAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get shipLaunched(): boolean {
    let value = this.get("shipLaunched");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set shipLaunched(value: boolean) {
    this.set("shipLaunched", Value.fromBoolean(value));
  }

  get isAllocated(): boolean {
    let value = this.get("isAllocated");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isAllocated(value: boolean) {
    this.set("isAllocated", Value.fromBoolean(value));
  }

  get allocatedAmount(): BigInt | null {
    let value = this.get("allocatedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set allocatedAmount(value: BigInt | null) {
    if (!value) {
      this.unset("allocatedAmount");
    } else {
      this.set("allocatedAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get isDistributed(): boolean {
    let value = this.get("isDistributed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isDistributed(value: boolean) {
    this.set("isDistributed", Value.fromBoolean(value));
  }

  get distributedAmount(): BigInt | null {
    let value = this.get("distributedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set distributedAmount(value: BigInt | null) {
    if (!value) {
      this.unset("distributedAmount");
    } else {
      this.set("distributedAmount", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class GrantShipLookup extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GrantShipLookup entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type GrantShipLookup must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("GrantShipLookup", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): GrantShipLookup | null {
    return changetype<GrantShipLookup | null>(
      store.get_in_block("GrantShipLookup", id.toHexString()),
    );
  }

  static load(id: Bytes): GrantShipLookup | null {
    return changetype<GrantShipLookup | null>(
      store.get("GrantShipLookup", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get anchorAddress(): Bytes {
    let value = this.get("anchorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set anchorAddress(value: Bytes) {
    this.set("anchorAddress", Value.fromBytes(value));
  }
}

export class PoolIdLookup extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolIdLookup entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolIdLookup must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PoolIdLookup", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PoolIdLookup | null {
    return changetype<PoolIdLookup | null>(
      store.get_in_block("PoolIdLookup", id),
    );
  }

  static load(id: string): PoolIdLookup | null {
    return changetype<PoolIdLookup | null>(store.get("PoolIdLookup", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get entityId(): Bytes {
    let value = this.get("entityId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set entityId(value: Bytes) {
    this.set("entityId", Value.fromBytes(value));
  }
}

export class GameManager extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GameManager entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type GameManager must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("GameManager", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): GameManager | null {
    return changetype<GameManager | null>(
      store.get_in_block("GameManager", id.toHexString()),
    );
  }

  static load(id: Bytes): GameManager | null {
    return changetype<GameManager | null>(
      store.get("GameManager", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get gameFacilitatorId(): BigInt {
    let value = this.get("gameFacilitatorId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gameFacilitatorId(value: BigInt) {
    this.set("gameFacilitatorId", Value.fromBigInt(value));
  }

  get rootAccount(): Bytes {
    let value = this.get("rootAccount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set rootAccount(value: Bytes) {
    this.set("rootAccount", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get currentRoundId(): BigInt {
    let value = this.get("currentRoundId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentRoundId(value: BigInt) {
    this.set("currentRoundId", Value.fromBigInt(value));
  }

  get currentRound(): string | null {
    let value = this.get("currentRound");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set currentRound(value: string | null) {
    if (!value) {
      this.unset("currentRound");
    } else {
      this.set("currentRound", Value.fromString(<string>value));
    }
  }

  get poolFunds(): BigInt {
    let value = this.get("poolFunds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set poolFunds(value: BigInt) {
    this.set("poolFunds", Value.fromBigInt(value));
  }
}

export class GameRound extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GameRound entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GameRound must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("GameRound", id.toString(), this);
    }
  }

  static loadInBlock(id: string): GameRound | null {
    return changetype<GameRound | null>(store.get_in_block("GameRound", id));
  }

  static load(id: string): GameRound | null {
    return changetype<GameRound | null>(store.get("GameRound", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get endTime(): BigInt {
    let value = this.get("endTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endTime(value: BigInt) {
    this.set("endTime", Value.fromBigInt(value));
  }

  get totalRoundAmount(): BigInt {
    let value = this.get("totalRoundAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRoundAmount(value: BigInt) {
    this.set("totalRoundAmount", Value.fromBigInt(value));
  }

  get totalAllocatedAmount(): BigInt {
    let value = this.get("totalAllocatedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAllocatedAmount(value: BigInt) {
    this.set("totalAllocatedAmount", Value.fromBigInt(value));
  }

  get gameStatus(): i32 {
    let value = this.get("gameStatus");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set gameStatus(value: i32) {
    this.set("gameStatus", Value.fromI32(value));
  }

  get ships(): Array<Bytes> {
    let value = this.get("ships");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set ships(value: Array<Bytes>) {
    this.set("ships", Value.fromBytesArray(value));
  }
}

export class ProfileMemberGroup extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProfileMemberGroup entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ProfileMemberGroup must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ProfileMemberGroup", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ProfileMemberGroup | null {
    return changetype<ProfileMemberGroup | null>(
      store.get_in_block("ProfileMemberGroup", id.toHexString()),
    );
  }

  static load(id: Bytes): ProfileMemberGroup | null {
    return changetype<ProfileMemberGroup | null>(
      store.get("ProfileMemberGroup", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get addresses(): Array<Bytes> | null {
    let value = this.get("addresses");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set addresses(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("addresses");
    } else {
      this.set("addresses", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Transaction | null {
    return changetype<Transaction | null>(
      store.get_in_block("Transaction", id),
    );
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }
}

export class RawMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RawMetadata entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RawMetadata must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RawMetadata", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RawMetadata | null {
    return changetype<RawMetadata | null>(
      store.get_in_block("RawMetadata", id),
    );
  }

  static load(id: string): RawMetadata | null {
    return changetype<RawMetadata | null>(store.get("RawMetadata", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get protocol(): BigInt {
    let value = this.get("protocol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set protocol(value: BigInt) {
    this.set("protocol", Value.fromBigInt(value));
  }

  get pointer(): string {
    let value = this.get("pointer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pointer(value: string) {
    this.set("pointer", Value.fromString(value));
  }
}

export class Log extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Log entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Log must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Log", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Log | null {
    return changetype<Log | null>(store.get_in_block("Log", id));
  }

  static load(id: string): Log | null {
    return changetype<Log | null>(store.get("Log", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get message(): string {
    let value = this.get("message");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set message(value: string) {
    this.set("message", Value.fromString(value));
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}
